{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/CharSearchForm.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js"],"names":["View","newDesc","objFit","char","name","description","thumbnail","homepage","wiki","length","slice","objectFit","className","src","alt","style","href","RandomChar","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharlist","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newcharList","ended","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","CSSTransition","timeout","classNames","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","renderItems","disabled","Skeleton","comicsFilter","comics","link","resourceURI","ind","split","reverse","join","to","splice","CharInfo","charId","skeleton","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","CharSearchForm","getCharacterByName","results","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","component","MainPage","selectedChar","decoration","img","setLoading","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","_baseOffset","res","_transformCharacter","getAllComics","_transformComic","getComic","path","extension","urls","comic","title","pageCount","language","textObjects","price","prices"],"mappings":"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","file":"static/js/5.152ecc80.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import './randomChar.scss';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\nimport { useState, useEffect } from 'react';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nconst RandomChar = () => {\r\n\r\n    const [char, setChar] = useState({});\r\n\r\n    const { loading, error, getCharacter, clearError } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        // const timerId = setInterval(updateChar, 6000);\r\n        // return () => {\r\n        //     clearInterval(timerId);\r\n        // }\r\n    }, []) // eslint-disable-line\r\n    // componentDidMount() {\r\n    //     this.updateChar();\r\n    //     // this.timerId = setInterval(this.updateChar, 3000);\r\n    // }\r\n\r\n    // componentWillUnmount() {\r\n    //     // clearInterval(this.timerId);\r\n    // }\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = () => {\r\n        clearError();\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n        getCharacter(id)\r\n            .then(onCharLoaded)\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage /> : null;\r\n    const spinner = loading ? <Spinner /> : null;\r\n    const content = !(loading || error) ? <View char={char} /> : null\r\n\r\n    return (\r\n        <div className=\"randomchar\" >\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br />\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button className=\"button button__main\" onClick={updateChar}>\r\n                    <div className=\"inner\">try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst View = ({ char }) => {\r\n    const { name, description, thumbnail, homepage, wiki } = char;\r\n    let newDesc,\r\n        objFit;\r\n    if (description) {\r\n        if (description.length > 214) {\r\n            newDesc = description.slice(0, 214) + '...';\r\n        } else {\r\n            newDesc = description;\r\n        }\r\n    } else {\r\n        newDesc = 'There is no data about this character';\r\n    }\r\n\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        objFit = { objectFit: 'contain' };\r\n    } else {\r\n        objFit = null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"randomchar__block\">\r\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={objFit} />\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">\r\n                    {newDesc}\r\n                </p>\r\n                <div className=\"randomchar__btns\">\r\n                    <a href={homepage} className=\"button button__main\">\r\n                        <div className=\"inner\">homepage</div>\r\n                    </a>\r\n                    <a href={wiki} className=\"button button__secondary\">\r\n                        <div className=\"inner\">Wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomChar;","import './charList.scss';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    CSSTransition,\r\n    TransitionGroup,\r\n} from 'react-transition-group';\r\n\r\nconst CharList = (props) => {\r\n\r\n    const [charList, setCharlist] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(210);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n\r\n    const { loading, error, getAllCharacters } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n    }, []); // eslint-disable-line\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        getAllCharacters(offset)\r\n            .then(onCharListLoaded)\r\n    }\r\n\r\n    const onCharListLoaded = (newcharList) => {\r\n        let ended = false;\r\n        if (newcharList.length < 9) {\r\n            ended = true;\r\n        }\r\n\r\n        setCharlist(charList => [...charList, ...newcharList]);\r\n        setNewItemLoading(newItemLoading => false);\r\n        setOffset(offset => offset + 9);\r\n        setCharEnded(charEnded => ended);\r\n    }\r\n\r\n    const itemRefs = useRef([]);\r\n\r\n    const focusOnItem = (id) => {\r\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\r\n        itemRefs.current[id].classList.add('char__item_selected');\r\n        itemRefs.current[id].focus();\r\n    }\r\n\r\n    // focus = () => {\r\n    //     if (this.myRef) {\r\n    //         this.myRef.focus();\r\n    //         console.log(this.myRef);\r\n    //     }\r\n    // }\r\n\r\n    function renderItems(arr) {\r\n        const items = arr.map((item, i) => {\r\n            let objFit = { objectFit: 'cover' }\r\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n                objFit = { objectFit: 'unset' }\r\n            }\r\n            return (\r\n                <CSSTransition timeout={500} classNames=\"char__item\">\r\n                    <li\r\n                        ref={el => itemRefs.current[i] = el}\r\n                        className={'char__item'}\r\n                        key={item.id}\r\n                        onClick={() => {\r\n                            props.onCharSelected(item.id);\r\n                            focusOnItem(i);\r\n                        }}\r\n                        onKeyPress={(e) => {\r\n                            if (e.key === ' ' || e.key === \"Enter\") {\r\n                                props.onCharSelected(item.id);\r\n                                focusOnItem(i);\r\n                            }\r\n                        }}\r\n                    >\r\n                        <img src={item.thumbnail} alt={item.name} style={objFit} />\r\n                        <div className=\"char__name\">{item.name}</div>\r\n                    </li>\r\n                </CSSTransition>\r\n            )\r\n        });\r\n        return (\r\n            <TransitionGroup className=\"char__grid\">\r\n                {items}\r\n            </TransitionGroup>\r\n        )\r\n    }\r\n\r\n    const items = renderItems(charList);\r\n    const errorMessage = error ? <ErrorMessage /> : null;\r\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\r\n\r\n    return (\r\n        <div className=\"char__list\">\r\n            {errorMessage}\r\n            {spinner}\r\n            {items}\r\n            <button\r\n                className=\"button button__main button__long\"\r\n                disabled={newItemLoading}\r\n                style={{ 'display': charEnded ? 'none' : 'block' }}\r\n                onClick={() => onRequest(offset)}\r\n            >\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nCharList.propTypes = {\r\n    onCharSelected: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CharList;","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import './charInfo.scss';\r\nimport { useState, useEffect } from 'react';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Skeleton from '../skeleton/Skeleton';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nconst CharInfo = (props) => {\r\n\r\n    const [char, setChar] = useState(null);\r\n    const { charId } = props;\r\n    const { loading, error, getCharacter, clearError } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n    }, [charId]) // eslint-disable-line\r\n\r\n    const updateChar = () => {\r\n        if (!charId) {\r\n            return;\r\n        }\r\n        clearError();\r\n        getCharacter(charId)\r\n            .then(onCharLoaded)\r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const skeleton = char || loading || error ? null : <Skeleton />\r\n\r\n    const errorMessage = error ? <ErrorMessage /> : null;\r\n    const spinner = loading ? <Spinner /> : null;\r\n    const content = !(loading || error || !char) ? <View char={char} /> : null\r\n\r\n\r\n    return (\r\n        <div className=\"char__info\" >\r\n            {skeleton}\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst View = ({ char }) => {\r\n    const { name, description, thumbnail, homepage, wiki, comics } = char;\r\n    let comicsFilter,\r\n        objFit;\r\n\r\n    if (comics.length !== 0) {\r\n        comicsFilter = comics.map((item, i) => {\r\n            const link = item.resourceURI;\r\n            let id = '';\r\n            let ind = link.length - 1;\r\n            while (link[ind] !== '/') {\r\n                id += link[ind];\r\n                --ind;\r\n            }\r\n\r\n            id = id.split('').reverse().join('');\r\n            if (i < 10) {\r\n                return (\r\n                    <li key={i} className=\"char__comics-item\">\r\n                        <Link to={`/MarvelApp/comics/${id}`}>{item.name}</Link>\r\n                    </li>\r\n                )\r\n            }\r\n            return null;\r\n        })\r\n        comicsFilter.splice(10);\r\n    } else {\r\n        comicsFilter = 'No data on comics';\r\n    }\r\n\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        objFit = { objectFit: 'contain' };\r\n    } else {\r\n        objFit = null;\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"char__basics\">\r\n                <img src={thumbnail} alt={name} style={objFit} />\r\n                <div>\r\n                    <div className=\"char__info-name\">{name}</div>\r\n                    <div className=\"char__btns\">\r\n                        <a href={homepage} className=\"button button__main\">\r\n                            <div className=\"inner\">homepage</div>\r\n                        </a>\r\n                        <a href={wiki} className=\"button button__secondary\">\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">\r\n                {description ? description : 'There is no data about this character'}\r\n            </div>\r\n            <div className=\"char__comics\">Comics:</div>\r\n            <ul className=\"char__comics-list\">\r\n                {comicsFilter}\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nCharInfo.propTypes = {\r\n    charId: PropTypes.number\r\n}\r\n\r\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage />\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const { loading, error, getCharacterByName, clearError } = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n    const errorMessage = error ? <div className='char__search-critical-error'><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n        <div className='char__search-wrapper'>\r\n            <div className='char__search-success'>There is! Visit {char[0].name} page?</div>\r\n            <Link to={`/MarvelApp/characters/${char[0].id}`} className='button button__secondary'>\r\n                <div className='inner'>To page</div>\r\n            </Link>\r\n        </div> :\r\n        <div className='char__search-error'>\r\n            The character was not found. Check the name and try again\r\n        </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues={{\r\n                    charName: '',\r\n                }}\r\n                validationSchema={Yup.object({\r\n                    charName: Yup.string()\r\n                        .required('This field is required')\r\n                })}\r\n                onSubmit={({ charName }) => {\r\n                    updateChar(charName)\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field\r\n                            id=\"charName\"\r\n                            name='charName'\r\n                            type='text'\r\n                            placeholder=\"Enter name\" />\r\n                        <button\r\n                            type='submit'\r\n                            className=\"button button__main\"\r\n                            disabled={loading}\r\n                        >\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\n\r\nimport { useState } from \"react\";\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected} />\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar} />\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm />\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\nimport './ErrorMessage.css';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img src={img} alt=\"error\" style={{ 'display': 'block', 'width': '250px', 'height': '250px', 'object-fit': 'contain', 'margin': '0 auto' }} />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const { loading, request, error, clearError } = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=5fd3f03653c1245ba41bca1d67655276';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter)\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        // console.log(res);\r\n        return res.data.results.map(_transformComic)\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComic(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComic = (comic) => {\r\n        return {\r\n            id: comic.id,\r\n            title: comic.title,\r\n            description: comic.description || 'There is no description',\r\n            pageCount: comic.pageCount ? `${comic.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\r\n            language: comic.textObjects.language || 'en-us',\r\n            price: comic.prices.price ? `${comic.prices.price}$` : 'not avaible'\r\n        }\r\n    }\r\n\r\n    return { loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic, getCharacterByName }\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'aplication/json' }) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, { method, body, headers });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch (e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n    return { loading, request, error, clearError }\r\n}"],"sourceRoot":""}