{"version":3,"sources":["components/comicsList/ComicsList.js","components/pages/ComicsPage.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["ComicsList","useState","comicsList","setComicsList","newComicLoading","setNewComicLoading","offset","setOffset","comicEnded","setComicEnded","useMarvelService","loading","error","getAllComics","useEffect","onRequest","initial","then","onComicListLoaded","newComicsList","ended","length","items","arr","map","item","thumbnail","objectFit","className","to","id","src","alt","title","price","renderComics","errorMessage","ErrorMessage","spinner","Spinner","disabled","style","onClick","ComicsPage","AppBanner","_toConsumableArray","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError"],"mappings":"yMAoFeA,EA7EI,WAEf,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA8CF,oBAAS,GAAvD,mBAAOG,EAAP,KAAwBC,EAAxB,KACA,EAA4BJ,mBAAS,KAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAoCN,oBAAS,GAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KAEA,EAAyCC,cAAjCC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,aAExBC,qBAAU,WACNC,EAAUT,GAAQ,KACnB,IAEH,IAAMS,EAAY,SAACT,EAAQU,GACbX,GAAVW,GACAH,EAAaP,GACRW,KAAKC,IAGRA,EAAoB,SAACC,GACvB,IAAIC,GAAQ,EACRD,EAAcE,OAAS,IACvBD,GAAQ,GAGZjB,GAAc,SAAAD,GAAU,4BAAQA,GAAR,YAAuBiB,OAC/Cd,GAAmB,SAAAD,GAAe,OAAI,KACtCG,GAAU,SAAAD,GAAM,OAAIA,EAAS,KAC7BG,GAAc,SAAAD,GAAU,OAAIY,MA6BhC,IAAME,EA1BN,SAAsBC,GAClB,IAAMD,EAAQC,EAAIC,KAAI,SAACC,GAKnB,MAHuB,wEAAnBA,EAAKC,WACI,CAAEC,UAAW,SAGtB,oBACIC,UAAW,eADf,SAII,eAAC,OAAD,CAAMC,GAAE,4BAAuBJ,EAAKK,IAApC,UACI,qBAAKC,IAAKN,EAAKC,UAAWM,IAAKP,EAAKQ,MAAOL,UAAU,qBACrD,qBAAKA,UAAU,oBAAf,SAAoCH,EAAKQ,QACzC,qBAAKL,UAAU,qBAAf,SAAqCH,EAAKS,YALzCT,EAAKK,OAUtB,OACI,oBAAIF,UAAU,eAAd,SACKN,IAKCa,CAAajC,GACrBkC,EAAexB,EAAQ,cAACyB,EAAA,EAAD,IAAmB,KAC1CC,EAAU3B,IAAYP,EAAkB,cAACmC,EAAA,EAAD,IAAc,KAC5D,OACI,sBAAKX,UAAU,eAAf,UACKQ,EACAE,EACAhB,EACD,wBACIM,UAAU,mCACVY,SAAUpC,EACVqC,MAAO,CAAE,QAAWjC,EAAa,OAAS,SAC1CkC,QAAS,kBAAM3B,EAAUT,IAJ7B,SAMI,qBAAKsB,UAAU,QAAf,6B,SClEDe,UATI,WACf,OACI,qCACI,cAACC,EAAA,EAAD,IACA,cAAC,EAAD,S,0FCHG,SAASC,EAAmBtB,GACzC,OCJa,SAA4BA,GACzC,GAAIuB,MAAMC,QAAQxB,GAAM,OAAO,OAAAyB,EAAA,GAAiBzB,GDGzC,CAAkBA,IELZ,SAA0B0B,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOH,MAAMO,KAAKJ,GFIvD,CAAgB1B,IAAQ,OAAA+B,EAAA,GAA2B/B,IGLvE,WACb,MAAM,IAAIgC,UAAU,wIHIwE","file":"static/js/7.51b17a0b.chunk.js","sourcesContent":["import './comicsList.scss';\r\nimport { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Spinner from '../spinner/Spinner';\r\n\r\nconst ComicsList = () => {\r\n\r\n    const [comicsList, setComicsList] = useState([]);\r\n    const [newComicLoading, setNewComicLoading] = useState(false);\r\n    const [offset, setOffset] = useState(210);\r\n    const [comicEnded, setComicEnded] = useState(false);\r\n\r\n    const { loading, error, getAllComics } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n    }, []); // eslint-disable-line\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewComicLoading(false) : setNewComicLoading(true);\r\n        getAllComics(offset)\r\n            .then(onComicListLoaded)\r\n    }\r\n\r\n    const onComicListLoaded = (newComicsList) => {\r\n        let ended = false;\r\n        if (newComicsList.length < 8) {\r\n            ended = true;\r\n        }\r\n\r\n        setComicsList(comicsList => [...comicsList, ...newComicsList]);\r\n        setNewComicLoading(newComicLoading => false);\r\n        setOffset(offset => offset + 8);\r\n        setComicEnded(comicEnded => ended);\r\n    }\r\n\r\n    function renderComics(arr) {\r\n        const items = arr.map((item) => {\r\n            let objFit = { objectFit: 'cover' }\r\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n                objFit = { objectFit: 'unset' }// eslint-disable-line\r\n            }\r\n            return (\r\n                <li\r\n                    className={'comics__item'}\r\n                    key={item.id}\r\n                >\r\n                    <Link to={`/MarvelApp/comics/${item.id}`}>\r\n                        <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\" />\r\n                        <div className=\"comics__item-name\">{item.title}</div>\r\n                        <div className=\"comics__item-price\">{item.price}</div>\r\n                    </Link>\r\n                </li>\r\n            )\r\n        });\r\n        return (\r\n            <ul className=\"comics__grid\">\r\n                {items}\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    const items = renderComics(comicsList);\r\n    const errorMessage = error ? <ErrorMessage /> : null;\r\n    const spinner = loading && !newComicLoading ? <Spinner /> : null;\r\n    return (\r\n        <div className=\"comics__list\">\r\n            {errorMessage}\r\n            {spinner}\r\n            {items}\r\n            <button\r\n                className=\"button button__main button__long\"\r\n                disabled={newComicLoading}\r\n                style={{ 'display': comicEnded ? 'none' : 'block' }}\r\n                onClick={() => onRequest(offset)}\r\n            >\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ComicsList;","import ComicsList from \"../comicsList/ComicsList\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <AppBanner />\r\n            <ComicsList />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}